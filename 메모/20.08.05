트랜잭션 속성
  ex) @Transactional(readOnly=true, isolation=Isolation.DEFAULT, rollbackFor=Exception.class)
  1. propagation : 이미 진행 중인 트랜잭션이 존재할 때 새로운 쿼리가 호출 될 경우, 어떻게 처리할지를 설정
  
  ex) @Transactional(propagation=Propagation.REQUIRED)
  
              1-1. REQUIRED : 진행중인 트랜잭션이 있다면 새로운 쿼리가 트랜잭션에 포함됨
                              진행중인 트랜잭션이 없다면 새로운 트랜잭션을 생성.
                              기본값.

              1-2. REQUIRED_NEW : 항상 새로운 트랜잭션을 시작.
              1-3. SUPPORT : 이미 시작된 트랜잭션이 있으면 트랜잭션에 포함
                              없으면 트랜잭션 없이 진행.
              1-4. NOT_SUPPORTED : 트랜잭션을 사용하지 않는다.
              1-5. MANDATORY : 시작된 트랜잭션이 있으면 참여한다.
                               시작된 트랜잭션이 없으면 예외 발생
              1-6. NEVER : 트랜잭션을 사용하지 않는다.
                           먼저 시작된 트랜잭션이 있으면 예외를 발생
      
      
 2. isolation : 트랜잭션 격리 수준을 관리
              여러 트랜잭션이 진행 될 때 트랜잭션의 작업 결과를
              어떻게 노출할 것인지 결정하는 기준
         ex) @Transactional(propagation=Propagation.REQUIRED, isolation=Isolation.DEFAULT)     
              2-1. DEFAULT : DB설정을 따라간다.
              2-2. READ_COMMIT : COMMIT 처리를 하지 않은 정보를 읽는 것을 방지.
                                 가장 많이 사용하는 격리 수준.
                                 ORACLE의 기본 값
              2-3. READ_UNCOMMITED : COMMIT 처리를 하지 않은 정보를 읽을 수 있음.                   
              2-4. REPEATABLE_READ : 하나의 트랜잭션에서 읽고 있는 ROW를 다른 트랜잭션에서 변경하는 것을 막아준다.
              2-5. SeRIALIZABLE : 트랜잭션을 순차적으로 진행 시킨다.
                                  가장 강력한 트랜잭션 격리 수준, 속도가 느리다.

 3. readOnly=true
              readOnly가 지정된 트랜잭션에서는 읽기만 가능.
 4. rollbackFor=Exception.class
              해당 예외가 발생했을 때 rollback 처리
 5. noRollBackFor=Exception.class
              해당 예외가 발생했을 때 rollback 처리 하지 않음.
